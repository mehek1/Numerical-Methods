import numpy as np
import matplotlib.pyplot as plt
import matplotlib.animation as animation
# global variables
global m1
global m2
global p
global h
m1 = 5
m2 = 5
h = 0.1
p = 5


def main():
    x1 = np.array([5, 0])
    x2 = np.array([-5, 0])
    v1 = np.array([0, p/m1])
    v2 = np.array([0, -p/m2])
    y = np.block([x1, x2, v1, v2])
    ruku_step(twomasses, y, h)
    print(y)


def twomasses(x1, x2):
    F1 = (m1*m2)*(x2-x1)/((np.linalg.norm(x2-x1))**3)
    return F1


def ruku_step(f, y, h):
    n = 1000
#Defining y(t) vector
    x1_new = np.zeros((n, 2))
    x2_new = np.zeros((n, 2))
    v1_new = np.zeros((n, 2))
    v2_new = np.zeros((n, 2))

    x1 = np.array([y[0], y[1]])
    x1_new[0][0] = x1[0]
    x1_new[0][1] = x1[1]

    x2 = np.array([y[2], y[3]])
    x2_new[0][0] = x2[0]
    x2_new[0][1] = x2[1]

    v1 = np.array([y[4], y[5]])
    v1_new[0][0] = v1[0]
    v1_new[0][1] = v1[1]

    v2 = np.array([y[6], y[7]])
    v2_new[0][0] = v2[0]
    v2_new[0][1] = v2[1]

    for i in range(1, n):
        k1 = twomasses(x1, x2)
        k2 = twomasses(x1+h*(1/2), x2+h*(1/2)*k1)
        k3 = f(x1+(1/2)*h, x2 + h*(1/2)*k2)
        k4 = f(x1+h, x2 + h*k3)

        x1 = (h*v1)+x1
        x1_new[i][0] = x1[0]
        x1_new[i][1] = x1[1]

        x2 = (h*v2)+x2
        x2_new[i][0] = x2[0]
        x2_new[i][1] = x2[1]

        v1 = v1 + h*(k1/6+k2/3+k3/3+k4/6)
        v1_new[i][0] = v1[0]
        v1_new[i][1] = v1[1]

        v2 = v2 - h*(k1/6+k2/3+k3/3+k4/6)
        v2_new[i][0] = v2[0]
        v2_new[i][1] = v2[1]

    x1p = np.zeros(n)
    y1p = np.zeros(n)
    x1p[0] = x1_new[0][0]
    y1p[0] = x1_new[0][1]
    for i in range(1, n):
        x1p[i] = x1_new[i][0]
        y1p[i] = x1_new[i][1]

    x2p = np.zeros(n)
    y2p = np.zeros(n)
    x2p[0] = x2_new[0][0]
    y2p[0] = x2_new[0][1]
    for i in range(1, n):
        x2p[i] = x2_new[i][0]
        y2p[i] = x2_new[i][1]

    fig, ax = plt.subplots() #for loop to create plot
    for t in range(n):
        if t == t:
            points, = ax.plot(x1p[t], y1p[t], marker='o', linestyle='None')
            points, = ax.plot(x2p[t], y2p[t], marker='o', linestyle='None')
            ax.set_xlim(-25, 25)
            ax.set_ylim(-25, 25)
        else:
            points.set_data(newx, newy)

        plt.pause(.001)

    return


if __name__ == "__main__":
    main()
